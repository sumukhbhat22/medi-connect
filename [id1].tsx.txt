import React from 'react';
import { 
  View, 
  Text, 
  StyleSheet, 
  ScrollView, 
  TouchableOpacity,
  Alert,
  Platform
} from 'react-native';
import { useLocalSearchParams, useRouter, Stack } from 'expo-router';
import { 
  Video, 
  Phone, 
  MessageSquare, 
  Calendar, 
  Clock,
  ArrowLeft,
  X
} from 'lucide-react-native';
import { Button } from '@/components/Button';
import { colors } from '@/constants/colors';
import { useUserStore } from '@/store/user-store';

export default function ConsultationDetailsScreen() {
  const { id } = useLocalSearchParams<{ id: string }>();
  const router = useRouter();
  
  const consultations = useUserStore(state => state.consultations);
  const cancelConsultation = useUserStore(state => state.cancelConsultation);
  
  const consultation = consultations.find(c => c.id === id);
  
  if (!consultation) {
    return (
      <View style={styles.notFoundContainer}>
        <Text style={styles.notFoundText}>Consultation not found</Text>
        <Button 
          title="Go Back" 
          onPress={() => router.back()}
        />
      </View>
    );
  }
  
  const getConsultationIcon = () => {
    switch (consultation.type) {
      case 'video':
        return <Video size={24} color={colors.primary} />;
      case 'voice':
        return <Phone size={24} color={colors.primary} />;
      case 'text':
        return <MessageSquare size={24} color={colors.primary} />;
      default:
        return <Video size={24} color={colors.primary} />;
    }
  };
  
  const getStatusColor = () => {
    switch (consultation.status) {
      case 'scheduled':
        return colors.primary;
      case 'completed':
        return colors.success;
      case 'cancelled':
        return colors.error;
      default:
        return colors.textSecondary;
    }
  };
  
  const handleJoinConsultation = () => {
    if (consultation.status !== 'scheduled') {
      Alert.alert('Cannot Join', 'This consultation is not currently scheduled.');
      return;
    }
    
    Alert.alert(
      'Join Consultation',
      `You are about to join a ${consultation.type} consultation with ${consultation.doctorName}.`,
      [
        {
          text: 'Cancel',
          style: 'cancel',
        },
        {
          text: 'Join Now',
          onPress: () => {
            // In a real app, this would launch the consultation interface
            Alert.alert('Joining Consultation', 'This would launch the consultation interface in a real app.');
          },
        },
      ]
    );
  };
  
  const handleCancelConsultation = () => {
    if (consultation.status !== 'scheduled') {
      Alert.alert('Cannot Cancel', 'Only scheduled consultations can be cancelled.');
      return;
    }
    
    Alert.alert(
      'Cancel Consultation',
      'Are you sure you want to cancel this consultation?',
      [
        {
          text: 'No',
          style: 'cancel',
        },
        {
          text: 'Yes, Cancel',
          onPress: () => {
            cancelConsultation(consultation.id);
            Alert.alert('Consultation Cancelled', 'Your consultation has been cancelled.');
          },
          style: 'destructive',
        },
      ]
    );
  };
  
  return (
    <ScrollView 
      style={styles.container}
      contentContainerStyle={styles.contentContainer}
      showsVerticalScrollIndicator={false}
    >
      <Stack.Screen 
        options={{
          title: '',
          headerLeft: () => (
            <TouchableOpacity 
              onPress={() => router.back()}
              style={styles.backButton}
            >
              <ArrowLeft size={24} color={colors.primary} />
            </TouchableOpacity>
          ),
        }} 
      />
      
      <View style={styles.header}>
        <Text style={styles.title}>Consultation Details</Text>
        <View style={[styles.statusContainer, { backgroundColor: getStatusColor() + '20' }]}>
          <Text style={[styles.status, { color: getStatusColor() }]}>
            {consultation.status.charAt(0).toUpperCase() + consultation.status.slice(1)}
          </Text>
        </View>
      </View>
      
      <View style={styles.card}>
        <View style={styles.cardHeader}>
          <View style={styles.typeContainer}>
            {getConsultationIcon()}
            <Text style={styles.type}>
              {consultation.type.charAt(0).toUpperCase() + consultation.type.slice(1)} Consultation
            </Text>
          </View>
        </View>
        
        <View style={styles.doctorInfo}>
          <Text style={styles.doctorName}>{consultation.doctorName}</Text>
          <Text style={styles.doctorSpecialty}>{consultation.specialty}</Text>
        </View>
        
        <View style={styles.divider} />
        
        <View style={styles.detailsContainer}>
          <View style={styles.detailItem}>
            <Calendar size={20} color={colors.primary} />
            <Text style={styles.detailText}>{consultation.date}</Text>
          </View>
          
          <View style={styles.detailItem}>
            <Clock size={20} color={colors.primary} />
            <Text style={styles.detailText}>{consultation.time}</Text>
          </View>
        </View>
      </View>
      
      <View style={styles.instructionsContainer}>
        <Text style={styles.instructionsTitle}>Instructions</Text>
        <Text style={styles.instructionsText}>
          1. Ensure you have a stable internet connection before joining.
        </Text>
        <Text style={styles.instructionsText}>
          2. Find a quiet place with good lighting for the consultation.
        </Text>
        <Text style={styles.instructionsText}>
          3. Have your medical history and current medications ready.
        </Text>
        <Text style={styles.instructionsText}>
          4. Write down any questions you want to ask the doctor.
        </Text>
      </View>
      
      {consultation.status === 'scheduled' && (
        <View style={styles.actionsContainer}>
          <Button 
            title="Join Consultation" 
            onPress={handleJoinConsultation}
            fullWidth
            style={styles.joinButton}
          />
          
          <TouchableOpacity 
            style={styles.cancelButton}
            onPress={handleCancelConsultation}
          >
            <X size={20} color={colors.error} />
            <Text style={styles.cancelText}>Cancel Consultation</Text>
          </TouchableOpacity>
        </View>
      )}
      
      {consultation.status === 'cancelled' && (
        <View style={styles.rescheduleCta}>
          <Text style={styles.rescheduleText}>
            This consultation has been cancelled. Would you like to reschedule?
          </Text>
          <Button 
            title="Book New Consultation" 
            onPress={() => router.push('/consultations')}
            variant="outline"
            fullWidth
            style={styles.rescheduleButton}
          />
        </View>
      )}
      
      {consultation.status === 'completed' && (
        <View style={styles.completedContainer}>
          <Text style={styles.completedText}>
            This consultation has been completed. You can book a follow-up if needed.
          </Text>
          <Button 
            title="Book Follow-up" 
            onPress={() => router.push('/consultations')}
            variant="outline"
            fullWidth
            style={styles.followUpButton}
          />
        </View>
      )}
    </ScrollView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: colors.background,
  },
  contentContainer: {
    padding: 16,
    paddingBottom: 32,
  },
  backButton: {
    padding: 8,
  },
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 24,
    marginTop: Platform.OS === 'ios' ? 8 : 0,
  },
  title: {
    fontSize: 24,
    fontWeight: '700',
    color: colors.text,
  },
  statusContainer: {
    paddingHorizontal: 12,
    paddingVertical: 6,
    borderRadius: 16,
  },
  status: {
    fontSize: 14,
    fontWeight: '500',
  },
  card: {
    backgroundColor: colors.card,
    borderRadius: 12,
    padding: 16,
    marginBottom: 24,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 2,
    elevation: 2,
  },
  cardHeader: {
    marginBottom: 16,
  },
  typeContainer: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  type: {
    fontSize: 16,
    color: colors.primary,
    marginLeft: 8,
    fontWeight: '500',
  },
  doctorInfo: {
    marginBottom: 16,
  },
  doctorName: {
    fontSize: 18,
    fontWeight: '600',
    color: colors.text,
    marginBottom: 4,
  },
  doctorSpecialty: {
    fontSize: 14,
    color: colors.textSecondary,
  },
  divider: {
    height: 1,
    backgroundColor: colors.border,
    marginBottom: 16,
  },
  detailsContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
  },
  detailItem: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  detailText: {
    fontSize: 14,
    color: colors.text,
    marginLeft: 8,
  },
  instructionsContainer: {
    backgroundColor: colors.card,
    borderRadius: 12,
    padding: 16,
    marginBottom: 24,
  },
  instructionsTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: colors.text,
    marginBottom: 12,
  },
  instructionsText: {
    fontSize: 14,
    color: colors.textSecondary,
    marginBottom: 8,
    lineHeight: 20,
  },
  actionsContainer: {
    marginBottom: 16,
  },
  joinButton: {
    marginBottom: 12,
  },
  cancelButton: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: 12,
  },
  cancelText: {
    fontSize: 14,
    color: colors.error,
    marginLeft: 8,
  },
  rescheduleCta: {
    backgroundColor: colors.card,
    borderRadius: 12,
    padding: 16,
    marginBottom: 16,
  },
  rescheduleText: {
    fontSize: 14,
    color: colors.textSecondary,
    marginBottom: 16,
    textAlign: 'center',
  },
  rescheduleButton: {
    marginTop: 8,
  },
  completedContainer: {
    backgroundColor: colors.card,
    borderRadius: 12,
    padding: 16,
    marginBottom: 16,
  },
  completedText: {
    fontSize: 14,
    color: colors.textSecondary,
    marginBottom: 16,
    textAlign: 'center',
  },
  followUpButton: {
    marginTop: 8,
  },
  notFoundContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 24,
  },
  notFoundText: {
    fontSize: 18,
    color: colors.textSecondary,
    marginBottom: 16,
  },
});