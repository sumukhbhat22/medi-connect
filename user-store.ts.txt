import { create } from 'zustand';
import { persist, createJSONStorage } from 'zustand/middleware';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { User, Consultation } from '@/types';

interface UserState {
  user: User | null;
  consultations: Consultation[];
  isOfflineMode: boolean;
  setUser: (user: User | null) => void;
  addConsultation: (consultation: Consultation) => void;
  updateConsultation: (id: string, updates: Partial<Consultation>) => void;
  cancelConsultation: (id: string) => void;
  toggleOfflineMode: () => void;
}

export const useUserStore = create<UserState>()(
  persist(
    (set) => ({
      user: null,
      consultations: [],
      isOfflineMode: false,
      setUser: (user) => set({ user }),
      addConsultation: (consultation) => 
        set((state) => ({ 
          consultations: [...state.consultations, consultation] 
        })),
      updateConsultation: (id, updates) => 
        set((state) => ({
          consultations: state.consultations.map(c => 
            c.id === id ? { ...c, ...updates } : c
          )
        })),
      cancelConsultation: (id) => 
        set((state) => ({
          consultations: state.consultations.map(c => 
            c.id === id ? { ...c, status: 'cancelled' } : c
          )
        })),
      toggleOfflineMode: () => 
        set((state) => ({ isOfflineMode: !state.isOfflineMode })),
    }),
    {
      name: 'user-storage',
      storage: createJSONStorage(() => AsyncStorage),
    }
  )
);